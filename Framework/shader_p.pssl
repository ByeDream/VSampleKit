/* SCE CONFIDENTIAL
PlayStation(R)4 Programmer Tool Runtime Library Release 03.508.201
* Copyright (C) 2013 Sony Computer Entertainment Inc.
* All Rights Reserved.
*/

#include "std_cbuffer.h"
#include "vsoutput.hs"
#include "illum.hs"


SamplerState samp0 : register(s0);

Texture2D colorMap : register( t0 );
Texture2D bumpGlossMap : register( t1 );
Texture2D specGlossMap : register( t2 );

float4 main( VS_OUTPUT In ) : S_TARGET_OUTPUT
{
	float3 lightRgb = m_lightColor.xyz;
	float4 lightAtten = m_lightAttenuation;
	float3 ambientRgb = m_ambientColor.xyz;
	float specPow = 30; // hardcode the specular power for simplified modeling 

	const float3 vN = In.vNorm;
	const float3 vT = In.vTang.xyz;
	const float3 vB = In.vTang.w * cross(vN, vT);
	float3 vL = m_lightPosition.xyz - In.vPosInView;
	const float3 vV = normalize(float3(0,0,0) - In.vPosInView);
	float d = length(vL); vL = normalize(vL);
	float attenuation = saturate(1.0f/(lightAtten.x + lightAtten.y * d + lightAtten.z * d * d) - lightAtten.w);

	float4 normalGloss = bumpGlossMap.Sample(samp0, In.TextureUV.xy);
	
	normalGloss.xyz = normalGloss.xyz * 2.0f - 1.0f;
	normalGloss.y = -normalGloss.y;		// normal map has green channel inverted

	float3 vBumpNorm = normalize(normalGloss.x*vT+normalGloss.y*vB+normalGloss.z*vN);
	//float3 vBumpNorm = normalize(vN); //@@LRF, use bump normal as geometry normal at the moment as we don't have normal mapping yet.
	float3 vGeomNorm = normalize(vN);
	

	float3 diff_col = colorMap.Sample(samp0, In.TextureUV.xy).xyz;
//	float3 diff_col = In.Color.rgb; // use vertex color as meterial diffuse color at the moment before I add texturing.
	
	float4 specGloss = specGlossMap.Sample(samp0, In.TextureUV.xy);
	float3 spec_col = 0.48*specGloss.x + 0.02; 
	//float3 spec_col = float3(0.5f, 0.5f, 0.5f); // hard code the meterial specular color at the moment as well.
	
	float3 vLightInts = attenuation*lightRgb*BRDF2_ts_nphong_nofr(vBumpNorm, vGeomNorm, vL, vV, diff_col, spec_col, specPow);
	
	float3 ambient = float3(0.0f, 0.0f, 0.0f);
	ambient = diff_col*ambientRgb;  // use meterial ambient as meterial diffuse for simple
	//--------------------
	/*
	float3 diffuse = float3(0.0f, 0.0f, 0.0f);
	float3 spec = float3(0.0f, 0.0f, 0.0f);

	float3 vLightInts = float3(0.0f, 0.0f, 0.0f);
	float diffuseFactor = dot(vL, vN);
	// Flatten to avoid dynamic branching
	[flatten]
	if(diffuseFactor > 0.0f)
	{
		//float3 v = normalize(vV+vL);
		//float specFactor = pow(saturate(dot(v, vN)), specPow);
		float3 v = reflect(-vL, vN);
		float specFactor = pow(saturate(dot(v, vV)), specPow);
		diffuse = diffuseFactor * diff_col * lightRgb;
		spec = specFactor * spec_col * lightRgb;
	}
	diffuse *= attenuation;
	spec *= attenuation;
	vLightInts = diffuse + spec;
	*/
	//--------------------
	
	vLightInts += ambient;

	//if (result.color.a < 0.5f)
	//	discard;
	return float4(vLightInts, In.Color.a);
}

